ADDING CIRCUITS

To add a support for a circuit in the UI you need to add a entry for the circuit
in the circuits.py circuits dictionary. The dictionary key will be displayed on 
the circuit tree. The value will be a CircuitInfo object defining the circuit
information. 

CircuitInfo parameters:
    - name                  Defines the name the circuit used by the machine.
    - group                 The circuit will be grouped under this tag on the circuit tree
    - inputs                Defines all the inputs of the circuit. If the number of input
                            is linked to certain parameter you can define it by adding
                            #ParameterName after the input name.
    - outputs               Same as above.
    - param_window_style    Ordered dictionary that defines the widgets used in 
                            the parameter window. More information below.
    - default_values        Optional. Can define a default value for a parameter.
                            The name has to match the parameter name in param_window_style.
                            For values linked to inputs/outputs default value has 
                            to be set.
    - script_format         Defines how the circuit will be written to the script.
                            More information below.


PARAMETER WINDOW STYLE

Parameter window style is defined as a ordered dictionary of name widget pairs.
Name is used as the label in parameter window and also as the name of the parameter
in general. The name has to matched in linked inputs/outputs, default values and 
script format. Widget defines what kind of a widget is used for setting the value 
of the parameter. All the available widgets are introduced in widgets.txt.

The window will be laid out with label and widget next to each other with all the
different parameters stacked on top of each other.


SCRIPT FORMAT

The script format is required so the UI knows how to write the script. Script will 
be written in blocks. The blocks are used to ensure that all the necessary pieces 
are added before certain actions occur. The blocks should be used like this:
    - Block 0: Imports and setting up the machine
    - Block 1: Adding the circuits
    - Block 2: Connecting circuits
    - Block 3: Configuring circuits dependand on other circuits
    - Block 4: Run time operations

The format itself is defined below. Lines without any of these special qualifiers
will be written as is. This can be used for example  to add comments and white space 
to improve the readability of the script.

The format:
    Delimiters:
    !               at the start of the line followed by number 0-4 to define the
                    block in which the following lines will be written.
    %Parameter%     to signal a parameter, these will be replaced by the corresponding 
                    values from parameters dictionary and as such must match the 
                    names given in param_window_format.
                    example: %Name%
    $Statement$     to signal an optional parameter, anything inside these will not 
                    be written if the parameter is missing. These should be used 
                    to enclose the parameter name in addition to the value so that 
                    they're not mistakingly added when the parameter is not set.
                    example: $parameter = '%Parameter%'$
    £Line£          to signal optional line, these lines will not be written
                    if no OPTIONAL parameters (defined by $$) are contained inside. 
                    example: £%name%.Configure($parameter = %Parameter%$)£

    Wildcard statements:
    INPUTS          is used to define where all input values of the circuit
                    are written. Needs to be added inside optional and
                    parameter delimiters ($%INPUTS%$).
                    example: machine.AddCircuit(type='Example', name = '%Name%', $%INPUTS%$)
